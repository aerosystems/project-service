package main

import (
	_ "github.com/aerosystems/project-service/docs" // docs are generated by Swag CLI, you have to import it.
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	httpSwagger "github.com/swaggo/http-swagger"
	"net/http"
	"os"
)

func (app *Config) routes() http.Handler {
	mux := chi.NewRouter()

	// Public routes
	mux.Use(middleware.Heartbeat("/ping"))

	// Private routes Basic Auth
	mux.Group(func(mux chi.Router) {
		mux.Use(middleware.BasicAuth("Swagger Docs", map[string]string{
			os.Getenv("BASIC_AUTH_DOCS_USERNAME"): os.Getenv("BASIC_AUTH_DOCS_PASSWORD"),
		}))
		mux.Get("/docs/*", httpSwagger.Handler(
			httpSwagger.URL("doc.json"), // The url pointing to API definition
		))
	})

	// Private routes X-API-KEY
	mux.Group(func(mux chi.Router) {
		mux.Use(app.XApiKeyMiddleware)
		mux.Get("/v1/token/validate", app.BaseHandler.ValidateToken)
	})

	// Private routes OAuth 2.0: check roles [startup, business, admin, support]. Auth implemented on API Gateway
	mux.Group(func(mux chi.Router) {
		mux.Use(func(next http.Handler) http.Handler {
			return app.TokenAuthMiddleware(next, "startup", "business", "admin", "support")
		})

		mux.Get("/v1/projects", app.BaseHandler.GetProjectList)
		mux.Get("/v1/projects/{projectID}", app.BaseHandler.GetProject)
	})

	// Private routes OAuth 2.0: check roles [business, admin, support]. Auth implemented on API Gateway
	mux.Group(func(mux chi.Router) {
		mux.Use(func(next http.Handler) http.Handler {
			return app.TokenAuthMiddleware(next, "business", "admin", "support")
		})

		mux.Delete("/v1/projects/{projectID}", app.BaseHandler.ProjectDelete)
		mux.Post("/v1/projects", app.BaseHandler.ProjectCreate)
		mux.Patch("/v1/projects/{projectID}", app.BaseHandler.ProjectUpdate)
	})

	return mux
}
