// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"cloud.google.com/go/firestore"
	"context"
	"firebase.google.com/go/v4/auth"
	"github.com/aerosystems/common-service/clients/gcpclient"
	"github.com/aerosystems/common-service/logger"
	"github.com/aerosystems/common-service/presenters/grpcserver"
	"github.com/aerosystems/common-service/presenters/httpserver"
	"github.com/aerosystems/project-service/internal/adapters"
	"github.com/aerosystems/project-service/internal/ports/grpc"
	"github.com/aerosystems/project-service/internal/ports/http"
	"github.com/aerosystems/project-service/internal/usecases"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	client := ProvideFirebaseAuthClient(config)
	firebaseAuth := ProvideFirebaseAuthMiddleware(client)
	firestoreClient := ProvideFirestoreClient(config)
	projectRepo := ProvideProjectRepo(firestoreClient)
	subscriptionAdapter := ProvideSubscriptionAdapter(config)
	projectUsecase := ProvideProjectUsecase(projectRepo, subscriptionAdapter)
	tokenUsecase := ProvideTokenUsecase(projectRepo)
	handler := ProvideHandler(projectUsecase, tokenUsecase)
	server := ProvideHTTPServer(config, logrusLogger, firebaseAuth, handler)
	projectService := ProvideProjectService(projectUsecase)
	grpcServerServer := ProvideGRPCServer(config, logrusLogger, projectService)
	app := ProvideApp(logrusLogger, config, server, grpcServerServer)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *Config, httpServer *HTTPServer.Server, grpcServer *GRPCServer.Server) *App {
	app := NewApp(log, cfg, httpServer, grpcServer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *Config {
	config := NewConfig()
	return config
}

func ProvideHandler(projectUsecase HTTPServer.ProjectUsecase, tokenUsecase HTTPServer.TokenUsecase) *HTTPServer.Handler {
	handler := HTTPServer.NewHandler(projectUsecase, tokenUsecase)
	return handler
}

func ProvideProjectUsecase(projectRepo usecases.ProjectRepository, subscriptionAdapter usecases.SubscriptionAdapter) *usecases.ProjectUsecase {
	projectUsecase := usecases.NewProjectUsecase(projectRepo, subscriptionAdapter)
	return projectUsecase
}

func ProvideTokenUsecase(projectRepo usecases.ProjectRepository) *usecases.TokenUsecase {
	tokenUsecase := usecases.NewTokenUsecase(projectRepo)
	return tokenUsecase
}

func ProvideProjectRepo(client *firestore.Client) *adapters.ProjectRepo {
	projectRepo := adapters.NewProjectRepo(client)
	return projectRepo
}

// wire.go:

func ProvideHTTPServer(cfg *Config, log *logrus.Logger, firebaseAuth *HTTPServer.FirebaseAuth, handler *HTTPServer.Handler) *HTTPServer.Server {
	return HTTPServer.NewHTTPServer(&HTTPServer.Config{
		Config: httpserver.Config{
			Host: cfg.Host,
			Port: cfg.Port,
		},
		Mode: cfg.Mode,
	}, log, firebaseAuth, handler)
}

func ProvideGRPCServer(cfg *Config, log *logrus.Logger, projectService *GRPCServer.ProjectService) *GRPCServer.Server {
	return GRPCServer.NewGRPCServer(&grpcserver.Config{Host: cfg.Host, Port: cfg.Port}, log, projectService)
}

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideFirestoreClient(cfg *Config) *firestore.Client {
	ctx := context.Background()
	client, err := firestore.NewClient(ctx, cfg.GcpProjectId)
	if err != nil {
		panic(err)
	}
	return client
}

func ProvideFirebaseAuthClient(cfg *Config) *auth.Client {
	client, err := gcpclient.NewFirebaseClient(cfg.GcpProjectId, cfg.GoogleApplicationCredentials)
	if err != nil {
		panic(err)
	}
	return client
}

func ProvideFirebaseAuthMiddleware(client *auth.Client) *HTTPServer.FirebaseAuth {
	return HTTPServer.NewFirebaseAuth(client)
}

func ProvideSubscriptionAdapter(cfg *Config) *adapters.SubscriptionAdapter {
	subscriptionAdapter, err := adapters.NewSubscriptionAdapter(cfg.SubscriptionServiceGRPCAddr)
	if err != nil {
		panic(err)
	}
	return subscriptionAdapter
}

func ProvideProjectService(projectUsecase GRPCServer.ProjectUsecase) *GRPCServer.ProjectService {
	return GRPCServer.NewProjectService(projectUsecase)
}
