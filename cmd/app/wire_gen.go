// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"cloud.google.com/go/firestore"
	"context"
	"firebase.google.com/go/auth"
	"github.com/aerosystems/project-service/internal/common/config"
	"github.com/aerosystems/project-service/internal/common/custom_errors"
	"github.com/aerosystems/project-service/internal/infrastructure/adapters/broker"
	"github.com/aerosystems/project-service/internal/infrastructure/adapters/rpc"
	"github.com/aerosystems/project-service/internal/infrastructure/repository/fire"
	"github.com/aerosystems/project-service/internal/presenters/grpc"
	"github.com/aerosystems/project-service/internal/presenters/http"
	"github.com/aerosystems/project-service/internal/presenters/http/handlers"
	"github.com/aerosystems/project-service/internal/presenters/http/handlers/project"
	"github.com/aerosystems/project-service/internal/presenters/http/handlers/token"
	"github.com/aerosystems/project-service/internal/presenters/http/middleware"
	"github.com/aerosystems/project-service/internal/usecases"
	"github.com/aerosystems/project-service/pkg/firebase"
	"github.com/aerosystems/project-service/pkg/logger"
	"github.com/aerosystems/project-service/pkg/pubsub"
	"github.com/aerosystems/project-service/pkg/rpc_client"
	"github.com/labstack/echo/v4"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	httpErrorHandler := ProvideErrorHandler(config)
	client := ProvideFirebaseAuthClient(config)
	firebaseAuth := ProvideFirebaseAuthMiddleware(client)
	baseHandler := ProvideBaseHandler(logrusLogger, config)
	firestoreClient := ProvideFirestoreClient(config)
	projectRepo := ProvideProjectRepo(firestoreClient)
	subsRepo := ProvideSubsRepo(config)
	pubSubClient := ProvidePubSubClient(config)
	checkmailEventsAdapter := ProvideCheckmailEventAdapter(pubSubClient, config)
	projectUsecase := ProvideProjectUsecase(projectRepo, subsRepo, checkmailEventsAdapter)
	handler := ProvideProjectHandler(baseHandler, projectUsecase)
	tokenUsecase := ProvideTokenUsecase(projectRepo)
	tokenHandler := ProvideTokenHandler(baseHandler, tokenUsecase)
	server := ProvideHttpServer(config, logrusLogger, httpErrorHandler, firebaseAuth, handler, tokenHandler)
	grpcServerHandler := ProvideGRPCHandlers(projectUsecase)
	grpcServerServer := ProvideGRPCServer(config, logrusLogger, grpcServerHandler)
	app := ProvideApp(logrusLogger, config, server, grpcServerServer)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *config.Config, httpServer *HttpServer.Server, grpcServer *GRPCServer.Server) *App {
	app := NewApp(log, cfg, httpServer, grpcServer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func ProvideGRPCHandlers(projectUsecase GRPCServer.ProjectUsecase) *GRPCServer.Handler {
	handler := GRPCServer.NewGRPCHandler(projectUsecase)
	return handler
}

func ProvideProjectHandler(baseHandler *handlers.BaseHandler, projectUsecase handlers.ProjectUsecase) *project.Handler {
	handler := project.NewProjectHandler(baseHandler, projectUsecase)
	return handler
}

func ProvideTokenHandler(baseHandler *handlers.BaseHandler, tokenUsecase handlers.TokenUsecase) *token.Handler {
	handler := token.NewTokenHandler(baseHandler, tokenUsecase)
	return handler
}

func ProvideProjectUsecase(projectRepo usecases.ProjectRepository, subsRepo usecases.SubsRepository, checkmailEventsAdapter usecases.CheckmailEventsAdapter) *usecases.ProjectUsecase {
	projectUsecase := usecases.NewProjectUsecase(projectRepo, subsRepo, checkmailEventsAdapter)
	return projectUsecase
}

func ProvideTokenUsecase(projectRepo usecases.ProjectRepository) *usecases.TokenUsecase {
	tokenUsecase := usecases.NewTokenUsecase(projectRepo)
	return tokenUsecase
}

func ProvideProjectRepo(client *firestore.Client) *fire.ProjectRepo {
	projectRepo := fire.NewProjectRepo(client)
	return projectRepo
}

// wire.go:

func ProvideHttpServer(cfg *config.Config, log *logrus.Logger, errorHandler *echo.HTTPErrorHandler, firebaseAuthMiddleware *middleware.FirebaseAuth, projectHandler *project.Handler, tokenHandler *token.Handler) *HttpServer.Server {
	return HttpServer.NewServer(cfg.Port, log, errorHandler, firebaseAuthMiddleware, projectHandler, tokenHandler)
}

func ProvideGRPCServer(cfg *config.Config, log *logrus.Logger, grpcHandlers *GRPCServer.Handler) *GRPCServer.Server {
	return GRPCServer.NewGRPCServer(cfg.Port, log, grpcHandlers)
}

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideBaseHandler(log *logrus.Logger, cfg *config.Config) *handlers.BaseHandler {
	return handlers.NewBaseHandler(log, cfg.Mode)
}

func ProvideSubsRepo(cfg *config.Config) *RpcRepo.SubsRepo {
	rpcClient := RpcClient.NewClient("tcp", cfg.SubsServiceRPCAddress)
	return RpcRepo.NewSubsRepo(rpcClient)
}

func ProvideFirestoreClient(cfg *config.Config) *firestore.Client {
	ctx := context.Background()
	client, err := firestore.NewClient(ctx, cfg.GcpProjectId)
	if err != nil {
		panic(err)
	}
	return client
}

func ProvideFirebaseAuthMiddleware(client *auth.Client) *middleware.FirebaseAuth {
	return middleware.NewFirebaseAuth(client)
}

func ProvideFirebaseAuthClient(cfg *config.Config) *auth.Client {
	app, err := firebaseApp.NewApp(cfg.GcpProjectId, cfg.GoogleApplicationCredentials)
	if err != nil {
		panic(err)
	}
	return app.Client
}

func ProvidePubSubClient(cfg *config.Config) *PubSub.Client {
	client, err := PubSub.NewClientWithAuth(cfg.GoogleApplicationCredentials)
	if err != nil {
		panic(err)
	}
	return client
}

func ProvideCheckmailEventAdapter(pubSubClient *PubSub.Client, cfg *config.Config) *broker.CheckmailEventsAdapter {
	return broker.NewCheckmailEventsAdapter(pubSubClient, cfg.CheckmailTopicId, cfg.CheckmailSubName, cfg.CheckmailCreateAccessEndpoint)
}

func ProvideErrorHandler(cfg *config.Config) *echo.HTTPErrorHandler {
	errorHandler := CustomErrors.NewEchoErrorHandler(cfg.Mode)
	return &errorHandler
}
